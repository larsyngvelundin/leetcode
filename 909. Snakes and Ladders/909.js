testCases = [
    [[-1, 247, 2, -1, -1, -1, 117, -1, -1, -1, -1, 106, 140, -1, -1, -1, -1],
    [212, -1, -1, -1, 65, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1],
    [-1, 43, -1, -1, -1, 135, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1],
    [158, -1, -1, 277, -1, -1, -1, -1, 84, -1, -1, -1, -1, 284, -1, 61, 87],
    [-1, 170, -1, -1, -1, -1, 270, 156, 267, -1, -1, 274, -1, -1, -1, -1, 95],
    [114, -1, -1, 180, 289, -1, -1, -1, -1, 205, -1, 58, -1, -1, 204, -1, -1],
    [180, 50, -1, 207, -1, -1, 61, -1, -1, -1, 127, -1, 33, -1, -1, 288, 198],
    [200, -1, -1, -1, -1, -1, 150, -1, 73, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 78, -1, -1, -1, -1, 283, -1, -1, -1, 204, 288, -1],
    [-1, 5, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 209, 135],
    [101, -1, -1, -1, 250, -1, 250, -1, 254, -1, 2, -1, -1, -1, -1, -1, -1],
    [238, -1, -1, 211, -1, -1, -1, -1, -1, -1, 29, -1, 101, 27, -1, -1, -1],
    [-1, -1, 145, 87, -1, -1, -1, -1, -1, -1, -1, -1, 118, 61, -1, 26, -1],
    [-1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, 170, -1, 90, -1, 214],
    [-1, 117, 154, -1, 198, 114, -1, -1, -
        1, -1, -1, -1, 248, 114, -1, 218, -1],
    [193, -1, -1, -1, -1, -1, -1, -1, 288, -1, -1, -1, 68, -1, -1, -1, -1],
    [-1, 3, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1]],
    [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 44, -1],
    [-1, -1, -1, -1, -1, -1, -1, 234, 81, -1, -1, -1, 179, 176, -1, 209, -1],
    [-1, -1, -1, 255, -1, -1, -1, -1, 43, -1, -1, -1, 184, -1, -1, -1, -1],
    [-1, -1, 200, 165, -1, -1, -1, -1, -1, -1, -1, -1, 253, 60, 168, -1, 114],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1],
    [-1, 222, 286, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 249, -1, -1],
    [81, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 121, -1],
    [168, -1, -1, -1, -1, -1, -1, 21, -1, -1, -1, -1, 62, -1, -1, 125, -1],
    [-1, -1, -1, -1, -1, 76, 156, -1, -1, -1, 253, -1, -1, -1, -1, -1, -1],
    [84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 155, -1, -1, -1, 138, -1],
    [-1, 226, 65, -1, -1, -1, -1, -1, -1, -1, 26, -1, 162, -1, -1, -1, 51],
    [-1, -1, 252, -1, -1, -1, -1, -1, -1, -1, 92, -1, -1, 36, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 275, -1, -1, -1, -1, -1, -1, 268, -1, -1, -1],
    [-1, -1, -1, -1, -1, 251, -1, 71, -1, -1, -1, -1, 242, -1, -1, 242, -1],
    [-1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, 108, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, 149, -1, -1, -1, -1, -1, -1, -1, -1, -1]],
    [[-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, 41, 43, -1, -1, -1, -1, -1, -1, -1, 107],
    [99, 82, -1, 113, 72, -1, -1, -1, -1, 136, -1, 92],
    [-1, -1, -1, 86, -1, -1, -1, 60, 49, 105, -1, -1],
    [-1, -1, 23, 40, -1, -1, -1, -1, -1, 140, -1, -1],
    [-1, -1, 79, -1, 7, 57, 117, 35, -1, -1, -1, 125],
    [-1, 98, -1, 2, -1, -1, -1, -1, -1, -1, 38, -1],
    [3, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, 1, -1, -1, 7, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 131, 75, 103, -1, 16, -1],
    [-1, -1, -1, -1, -1, 118, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, 119, -1, -1, -1, -1, -1, -1, -1]],
    [[-1, -1, -1, -1, 48, 5, -1],
    [12, 29, 13, 9, -1, 2, 32],
    [-1, -1, 21, 7, -1, 12, 49],
    [42, 37, 21, 40, -1, 22, 12],
    [42, -1, 2, -1, -1, -1, 6],
    [39, -1, 35, -1, -1, 39, -1],
    [-1, 36, -1, -1, -1, -1, 5]],
    [[-1, -1, 2, 21, -1],
    [16, -1, 24, -1, 4],
    [2, 3, -1, -1, -1],
    [-1, 11, 23, 18, -1],
    [-1, -1, -1, 23, -1]],
    [[-1, -1, -1, 16, -1, -1, -1, -1, 37, -1],
    [-1, -1, 87, -1, -1, -1, -1, -1, -1, 16],
    [-1, 53, 75, 70, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 42, -1, -1, 75, 50],
    [-1, -1, -1, -1, 35, -1, 12, -1, -1, -1],
    [56, -1, -1, -1, -1, 95, -1, -1, -1, -1],
    [-1, -1, -1, -1, 95, -1, -1, -1, 32, 87],
    [-1, 47, 35, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, 35, -1, -1, 55, 83],
    [-1, -1, -1, 28, -1, -1, -1, 2, -1, -1]],
    [[-1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 169, 130, 187, -1],
    [-1, -1, 120, -1, -1, 6, 40, -1, 161, -1, -1, -1, -1, 30, 57],
    [-1, 46, 102, -1, -1, 196, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 134, 95],
    [-1, -1, 174, -1, -1, -1, -1, 49, -1, 178, 95, -1, -1, 110, -1],
    [69, -1, -1, -1, 14, 118, -1, -1, 157, -1, 60, -1, -1, 204, -1],
    [176, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [203, -1, -1, 174, -1, -1, -1, -1, -1, -1, -1, -1, 86, -1, 73],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, 76, -1, -1, -1, -1, -1, -1, -1, -1, -1, 98, -1, -1, 51],
    [161, -1, -1, -1, -1, -1, -1, -1, 98, 192, -1, 91, -1, -1, -1],
    [194, -1, 106, 14, -1, 187, -1, 216, -1, -1, 42, -1, -1, -1, -1],
    [63, -1, -1, -1, 87, -1, -1, -1, -1, 78, -1, -1, 62, 5, 5],
    [-1, -1, 42, 175, -1, -1, -1, -1, 51, -1, -1, 87, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 160, -1, -1, 94, -1, -1, -1, -1, -1]],
    [[-1, 17, -1, 6, -1, -1],
    [-1, 23, -1, 31, -1, -1],
    [-1, 35, -1, 28, -1, -1],
    [-1, 30, 24, -1, 13, -1],
    [-1, 10, -1, 16, 26, -1],
    [-1, -1, 27, 15, -1, -1]],
    [[-1, -1, 128, -1, -1, -1, 136, -1, -1, -1, 109, -1],
    [-1, -1, -1, -1, -1, 103, -1, -1, 56, 10, -1, -1],
    [-1, -1, -1, -1, -1, -1, 116, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, 50, -1, 67, 107],
    [-1, 40, -1, -1, -1, 20, -1, 59, -1, 67, -1, -1],
    [-1, -1, -1, -1, -1, -1, 112, 133, 111, -1, -1, -1],
    [-1, -1, 112, -1, 74, -1, -1, -1, -1, -1, -1, -1],
    [23, -1, 115, -1, 129, 126, -1, -1, -1, -1, -1, -1],
    [106, 143, 81, -1, -1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, 26, 102, 1, 29],
    [26, -1, -1, -1, -1, -1, -1, -1, 27, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1]],
    [[-1, -1, 27, 13, -1, 25, -1],
    [-1, -1, -1, -1, -1, -1, -1],
    [44, -1, 8, -1, -1, 2, -1],
    [-1, 30, -1, -1, -1, -1, -1],
    [3, -1, 20, -1, 46, 6, -1],
    [-1, -1, -1, -1, -1, -1, 29],
    [-1, 29, 21, 33, -1, -1, -1]],
    [[-1, -1, 19, 10, -1],
    [2, -1, -1, 6, -1],
    [-1, 17, -1, 19, -1],
    [25, -1, 20, -1, -1],
    [-1, -1, -1, -1, 15]],
    [[1, 1, -1],
    [1, 1, 1],
    [-1, 1, 1]],
    [[-1, -1, -1],
    [-1, 9, 8],
    [-1, 8, 9]],
    [[-1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1],
    [-1, 35, -1, -1, 13, -1],
    [-1, -1, -1, -1, -1, -1],
    [-1, 15, -1, -1, -1, -1]],
    [[-1, -1], [-1, 3]]
];
expectedResults = [5, 10, 5, 3, 2, 4, 7, 3, 8, 4, 2, -1, 1, 4, 1];

var snakesAndLadders = function (board) {
    let stepsAway = {};
    let spaceList = [];
    // console.log(board)
    // console.log("board length", board.length)
    //for i in reversed(range(0, len(board))):
    for (let i = board.length - 1; i >= 0; i--) {
        //     if i % 2 != len(board) % 2:
        if (i % 2 != board.length % 2) {
            //         for j in range(0, len(board[i])):
            // console.log(board[i])
            // console.log(board[i].length)
            for (let j = 0; j < board[i].length; j++) {
                //             space_list.append(board[i][j])
                spaceList.push(board[i][j]);
            }
        }
        //     else:
        else {
            //         for j in reversed(range(0, len(board[i]))):
            for (let j = board[i].length - 1; j >= 0; j--) {
                //             space_list.append(board[i][j])
                spaceList.push(board[i][j]);
            }
        }
    }
    // console.log(spaceList);

    // for i in range(0, len(space_list)):
    for (let i = 0; i < spaceList.length; i++) {
        //     steps_away[i] = 999
        stepsAway[i] = 999;
        //     if space_list[i] > 0:
        if (spaceList[i] > 0) {
            //         space_list[i] -= 1
            spaceList[i] -= 1;
        }
        //     else:
        else {
            //         space_list[i] = i
            spaceList[i] = i;
        }
    }
    // console.log(spaceList);


    // for x in range(0, len(space_list)):
    for (let x = 0; x < spaceList.length; x++) {
        //     if space_list[x] == len(space_list) - 1:
        if (spaceList[x] == spaceList.length - 1) {
            //         steps_away[x] = 0
            stepsAway[x] = 0
        }
    }

    // rounds_of_ref = int(len(board)/3) + 1
    // for refinements in range(0, rounds_of_ref):
    let refining = true;
    let extraTries = 0;
    while (refining) {
        lastResult = stepsAway[0];
        //     for i in reversed(range(0, len(space_list))):
        for (let i = spaceList.length - 1; i >= 0; i--) {
            //         reverse_range = 6
            let reverseRange = 6;
            //         if i < 6:
            if (i < 6) {
                //             reverse_range = i
                reverseRange = i;
            }
            //         for j in reversed(range(i - reverse_range, i)):
            for (let j = i - reverseRange; j < i - 1; j++) {
                //             for x in range(0, len(space_list)):
                for (let x = 0; x < spaceList.length; x++) {
                    //                 if space_list[x] == j:
                    //                     if steps_away[x] > steps_away[i] + 1:
                    if (spaceList[x] == j && stepsAway[x] > stepsAway[i] + 1) {
                        //                         steps_away[x] = steps_away[i] + 1
                        stepsAway[x] = stepsAway[i] + 1;
                    }
                }
            }
        }
        newResult = stepsAway[0]
        if (newResult == lastResult) {

            if (extraTries > 100) {
                refining = false;
            }
            extraTries += 1;
        }
        else {
            extraTries = 0;
        }

    }
    // if steps_away[0] < 999:
    if (stepsAway[0] < 999) {
        //     return steps_away[0]
        return stepsAway[0]
    }
    return -1

};

// # Testing
// for i in range(0, len(test_cases)):
for (let i = 0; i < testCases.length; i++) {
    //     result = snakesAndLadders(test_cases[i])
    let result = snakesAndLadders(testCases[i]);
    // if result == expected_results[i]:
    if (result == expectedResults[i]) {
        //     print(f"==Test case {i+1} was valid")
        console.log(`==Test case ${i + 1} was valid`)
        // print(f"✔️ {result} moves, expected {expected_results[i]}")
        console.log(`✔️ ${result} moves, expected ${expectedResults[i]}`)
    }
    //     else:
    else {
        // print(f"==Test case {i+1} was INVALID")
        console.log(`==Test case ${i + 1} was INVALID`)
        // print(f"❌ {result} moves, expected {expected_results[i]}")
        console.log(`❌ ${result} moves, expected ${expectedResults[i]}`)
    }
    // #stop = input(f"")
}